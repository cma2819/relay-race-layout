<segment>
    <style>
        .top {
            background-color: rgba(255, 255, 255, 0.8);
        }
        .no-reached {
            background-color: rgba(0, 0, 0, 0.8);
        }
        .not-last-segment {
            border-right: 1px solid white;
        }
    </style>

    <div class="columns is-vcentered is-marginless is-mobile is-multiline top">
        <div each={(current, idx) in state.currentSegments}
             class="column is-paddingless has-text-centered has-text-info
                    {(current != null && current.runIndex < props.runIdx) ? 'no-reached' : ''}
                    {(current != null && current.runIndex == props.runIdx && current.segIndex < props.segIdx) ? 'no-reached' : ''}
                    {idx < state.currentSegments.length - 1 ? 'not-last-segment' : ''}">
            <figure class="image is-18x18 flag">           
                <span class="icon">
                <i if={current != null && current.runIndex == props.runIdx && current.segIndex == props.segIdx} class="fas fa-flag"></i>
                </span>
            </figure>
        </div>
        <div class="column is-full has-background-dark has-text-white">
            {props.segment}
        </div>
    </div>

    <script type="ts">
        // Define logics about this component here.
        
        import { SegmentComponent } from './types'
        const progressRep = nodecg.Replicant('progress')

        function Segment(): SegmentComponent {
            return {
                state:{
                    currentSegments: []
                },
                onMounted() {
                    progressRep.on('change', (newVal) => {
                        this.state.currentSegments = newVal.map((progress) => {
                            return progress.segments.current
                        })
                        this.update()
                    })
                }
            }
        }

        export default Segment
        
    </script>
</segment>