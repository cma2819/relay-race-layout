<checkpoint>
    <style>
        .hero-body {
            padding: 1.5rem 1.5rem;
        }
        .not-last-segment {
            border-right: 1px solid white;
        }
        .game-imaged {
            background-position: center;
            background-size: cover;
        }
        .game-imaged > div {
            background-color: rgba(0, 0, 0, 0.5);
        }
    </style>
    
    <div class="container">
        <section class="hero has-background-light">
            <div class="hero-body">
                <div class="container">
                    <h1 class="title is-5">
                        チェックポイント
                    </h1>
                </div>
            </div>
        </section>
        <div class="columns is-marginless is-mobile has-text-white has-background-dark">
            <div each={(team, idx) in state.teams}
                 class="column has-text-centered {idx < state.teams.length - 1 ? 'not-last-segment' : ''} {teamColorIsLight(team) ? 'has-text-dark' : 'has-text-light'}"
                 style="background-color: {team.color}">
                {team.name[0]}
            </div>
        </div>
        <div each={(run, runIdx) in state.runs}>
        <div class="columns is-marginless is-mobile has-text-white has-text-weight-bold {run.image ? 'game-imaged' : 'has-background-primary'}" if='{runIdx >= state.minCpIdxs.run}'
             style="background-image: url('{run.image}')">
            <div class="column has-text-centered">
                <div>{run.game}</div>
            </div>
        </div>
            <segment each={(segment, idx) in run.segments} segment={segment} runIdx={runIdx} segIdx={idx}
                if='{runIdx > state.minCpIdxs.run || (runIdx == state.minCpIdxs.run && idx >= state.minCpIdxs.seg)}'></segment> 
        </div>
    </div>

    <script type="ts">
        // Define logics about this component here.
        
        import { CheckpointComponent } from './types'
        import Segment from './segment.riot'

        import Color from 'color'

        const relayRep = nodecg.Replicant('relay')
        const graphicsRep = nodecg.Replicant('graphics')
        const teamListRep = nodecg.Replicant('team-list')

        function Checkpoint(): CheckpointComponent {
            return {
                state:{
                    runs: [],
                    progress: [],
                    checkpointIndex: 0,
                    minCpIdxs: {
                        run: 0,
                        seg: 0
                    },
                    teamIdxs: []
                },
                teamColorIsLight(team) {
                    return Color(team.color).isLight()
                }
                onMounted() {
                    relayRep.on('change', (newVal) => {
                        this.state.runs = newVal.runs
                        this.calcCheckpointIndex()
                        this.update()
                    })
                    graphicsRep.on('change', (newVal) => {
                        this.state.checkpointIndex = newVal.checkpointIndex
                        this.calcCheckpointIndex()
                        this.update()
                    })
                    teamListRep.on('change', (newVal) => {
                        this.state.teams = newVal
                        this.update()
                    })
                },
                calcCheckpointIndex() {
                    let totalSegmentCount = 0;
                    for (let i = 0; i < this.state.runs.length; i++) {
                        this.state.minCpIdxs.run = i;
                        if (this.state.checkpointIndex < (totalSegmentCount + this.state.runs[i].segments.length)) {
                            break;
                        }
                        totalSegmentCount += this.state.runs[i].segments.length
                    }
                    this.state.minCpIdxs.seg = this.state.checkpointIndex - totalSegmentCount
                }
            }
        }

        Checkpoint.components = {
            Segment
        }
        export default Checkpoint
        
    </script>
</checkpoint>