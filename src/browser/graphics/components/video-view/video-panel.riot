<video-panel>
    <style>
        :host {
            border: 2px solid rgba(255, 255, 255, 0.9);
            position: relative;
        }

        div.label-container {
            font-weight: bold;
            font-size: 24px;
            padding: 0.1rem 0.5rem;
            position: absolute;
            height: 10%;
            width: 100%;
            background-color: white;
        }

        div.is-top {
            top: 0%;
        }

        div.split {
            position: absolute;
            width: 100%;
            padding: 0.5rem 1rem;
        }

        div.is-top.split {
            top: 10%;
        }

        div.is-bottom {
            bottom: 0%;
        }

        div.is-bottom.split {
            bottom: 10%;
        }

    </style>
    
    <div class="border-tr" style="border-color: {props.team.color}"></div>
    <div class="border-bl" style="border-color: {props.team.color}"></div>
    <div class="label-container {props.idx < 2 ? 'is-bottom' : 'is-top'} {teamColorIsLight() ? 'has-text-dark' : 'has-text-light'}" style="background-color: {props.team.color};">
        <div class="columns is-marginless label-content" if={state.progress.segments.current}>
            <div class="column is-paddingless has-text-centered">{props.team.players[state.progress.segments.current.runIndex].name}
                <span class="icon" style="margin-left:0.5rem;" if={props.soundEnable}>
                    <i class="fas fa-volume-up"></i>
                </span>
                <span style="position: absolute; bottom: 0%; margin-left: 0.5rem;" class="animated {props.socialFading ? 'fadeOutRight' : 'fadeInRight'} is-size-5">
                    <span if={props.socialState === 0 && props.team.players[state.progress.segments.current.runIndex].twitter}>
                        <span class="icon">
                            <i class="fab fa-twitter"></i>
                        </span>
                        {props.team.players[state.progress.segments.current.runIndex].twitter}
                    </span>
                    <span if={props.socialState === 1 && props.team.players[state.progress.segments.current.runIndex].twitch}>
                        <span class="icon">
                            <i class="fab fa-twitch"></i>
                        </span>
                        {props.team.players[state.progress.segments.current.runIndex].twitch}
                    </span>
                    <span if={props.socialState === 2 && props.team.players[state.progress.segments.current.runIndex].nico}>
                        {props.team.players[state.progress.segments.current.runIndex].nico}
                    </span>
                </span>
            </div>
        </div>
    </div>
    <div class="notification is-info is-light split animated {props.idx < 2 ? 'is-bottom' : 'is-top'} {state.exit ? 'fadeOut' : 'fadeIn'}" if={ state.showSplit }>
        {state.split.segment} - {state.split.time}
    </div>

    <script type="ts">
        // Define logics about this component here.
        
        import { VideoPanelComponent } from './types'

        import Color from 'color'

        const progressRep = nodecg.Replicant('progress')

        function VideoPanel(): VideoPanelComponent {
            return {
                state:{
                    showSplit: false,
                    split: {
                        segment: '',
                        time: ''
                    },
                    exit: false,
                    progress: {
                        segments: {
                            current: {
                                runIndex: 0,
                                segIndex: 0
                            }
                        }
                    }
                },
                teamColorIsLight() {
                    try {
                        return Color(this.props.team.color).isLight()
                    } catch (err) {
                        return false
                    }
                },
                onMounted() {
                    progressRep.on('change', (newVal) => {
                        this.state.progress = newVal[this.props.idx]
                        this.update()
                    })
                    nodecg.listenFor('event:showSplit', (data) => {
                        if (data.teamIdx !== this.props.idx) {
                            return
                        }
                        this.state.split.segment = data.segment
                        this.state.split.time = data.time.split('.')[0]
                        this.state.exit = false
                        this.state.showSplit = true
                        setTimeout(() => {
                            this.state.exit = true
                            this.update()
                        }, 10000)
                        this.update()
                    }) 
                }
            }
        }

        export default VideoPanel
        
    </script>
</video-panel>