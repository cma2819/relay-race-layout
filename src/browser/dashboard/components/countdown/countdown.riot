<countdown>

    <div class="columns is-marginless">
        <div class="column is-paddingless columns is-marginless is-vcentered is-centered is-size-3">
            {state.restTime}
        </div>
        <div class="column is-paddingless columns is-marginless is-vcentered is-centered">
            <button type="button" class="button is-success flat" if={!state.running} onclick={startCountdown}>開始</button>
            <button type="button" class="button is-success flat" if={state.running} onclick={stopCountdown}>停止</button>
            <button type="button" class="button is-info flat" onclick="{editCountdownHandler}">編集</button>
        </div>
    </div>

    <countdown-edit
    class="modal {state.showEdit ? 'is-active' : ''}"
    submitHandler={submitCountdownHandler}
    closeHandler={closeCountdownHandler}></countdown-edit>

    <script type="ts">
        import {CountdownComponent} from './types'
        import CountdownEdit from './edit.riot'

        const countdownRep = nodecg.Replicant('countdown')

        function Countdown(): CountdownComponent {
            return {
                status: {
                    showEdit: true,
                    restTime: '',
                    running: false
                },
                onMounted() {
                    countdownRep.on('change', newVal => {
                        this.state.restTime = newVal.time.formatted.split('.')[0]
                        this.state.running = newVal.running
                        this.update()
                    })
                },
                startCountdown() {
                    nodecg.sendMessage('startCountdown')
                },
                stopCountdown() {
                    nodecg.sendMessage('stopCountdown')
                }
                editCountdownHandler(e: Event) {
                    this.state.showEdit = true
                    this.update()
                },
                submitCountdownHandler(time: string) {
                    nodecg.sendMessage('editCountdown', time)
                    .then(result => {
                        this.notify(result, 'is-success')
                    })
                    .catch(err => {
                        this.notify(err, 'is-warning')
                    })
                    this.state.showEdit = false
                    this.update()
                },
                closeCountdownHandler(e:Event) {
                    this.state.showEdit = false
                    this.update()
                }
            }
        }

        Countdown.components = {
            CountdownEdit
        }
        export default Countdown
    </script>
</countdown>