<split-list>
    <style>
        .table-container {
            max-height: 680px;
            overflow-y: auto;
        }
    </style>
    
    <div class="columns is-marginless is-vcentered">
        <div class="column is-3">
            <button type="button" class="button is-success is-fullwidth" onclick={prevTeam}>
                <span class="icon">
                    <i class="fas fa-caret-left"></i>
                </span>
                <span>前チーム</span>
            </button>
        </div>
        <div class="column has-text-centered">
            <span if={state.teamList[state.idx]}>{state.idx + 1} : {state.teamList[state.idx].name}</span>
        </div>
        <div class="column is-3">
            <button type="button" class="button is-success is-fullwidth" onclick={nextTeam}>
                <span class="icon">
                    <i class="fas fa-caret-right"></i>
                </span>
                <span>次チーム</span>
            </button>
        </div>
    </div>
    <div class="table-container">
        <table class="table is-striped is-fullwidth">
            <thead>
                <tr>
                    <th class="has-text-centered">区間名</th>
                    <th class="has-text-centered">区間内タイム</th>
                    <th class="has-text-centered">総合タイム</th>
                    <th class="has-text-centered">編集</th>
                </tr>
            </thead>
            <tbody style="border-top: 1px solid black" each={(run, runIdx) in state.runs} if={state.teamList[state.idx] && state.progress[state.idx]}>
                <tr>
                    <th colspan="4">{
                        state.teamList[state.idx].players[runIdx] ?
                        state.teamList[state.idx].players[runIdx].name : '(走者情報なし)'} - {run.game}[{run.category}]</th>
                </tr>
                <tr each={(segment, segIdx) in run.segments} class={runIdx === state.selectedRow.runIdx && segIdx === state.selectedRow.segIdx ? 'is-selected' : ''}>
                    <td>{segment}</td>
                    <td if={state.progress[state.idx].splits[runIdx]} class="has-text-right">
                        {
                            state.progress[state.idx].splits[runIdx][segIdx] ?
                            state.progress[state.idx].splits[runIdx][segIdx]['run'].formatted : '-'}</td>
                    <td if={!state.progress[state.idx].splits[runIdx]} class="has-text-right">-</td>
                    <td if={state.progress[state.idx].splits[runIdx]} class="has-text-right">
                        {
                            state.progress[state.idx].splits[runIdx][segIdx] ?
                            state.progress[state.idx].splits[runIdx][segIdx]['total'].formatted : '-'}</td>
                    <td if={!state.progress[state.idx].splits[runIdx]} class="has-text-right">-</td>
                    <td class="has-text-centered">
                        <button class="button is-info is-small" onclick={editSplitProvider(state.idx, runIdx, segIdx)}
                                disabled={!state.progress[state.idx].splits[runIdx] || !state.progress[state.idx].splits[runIdx][segIdx]}>
                            <i class="fas fa-pen"></i>
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <div id="editor" class="modal {state.showEdit ? 'is-active' : ''}"></div>

    <script type="ts">
        import * as riot from "riot";
        import { SplitListComponent } from './types'
        import SplitEdit from './edit.riot'

        const mountEditComponent = riot.component(SplitEdit)

        const relayRep = nodecg.Replicant('relay')
        const progressRep = nodecg.Replicant('progress')
        const teamListRep = nodecg.Replicant('team-list')

        function SplitList(): SplitListComponent {
            return {
                state:{
                    showEdit: false,
                    idx: 0,
                    runs: [],
                    progress: [],
                    selectedRow:{},
                    teamList: []
                },
                onMounted() {
                    relayRep.on('change', newVal => {
                        this.state.runs = newVal.runs
                        this.update()
                    })
                    progressRep.on('change', newVal => {
                        this.state.progress = newVal
                        this.setSelectedRow()
                        this.update()
                    })
                    teamListRep.on('change', newVal => {
                        this.state.teamList = newVal
                        this.update()
                    })
                },
                setSelectedRow() {
                    this.state.selectedRow = {
                        runIdx: this.state.progress[this.state.idx].segments.current.runIndex,
                        segIdx: this.state.progress[this.state.idx].segments.current.segIndex
                    }
                },
                nextTeam() {
                    if (this.state.idx + 1 < this.state.teamList.length) {
                        this.state.idx++
                    } else {
                        this.state.idx = 0
                    }
                    this.setSelectedRow()
                    this.update()
                },
                prevTeam() {
                    if (this.state.idx - 1 < 0) {
                        this.state.idx = this.state.teamList.length - 1
                    } else {
                        this.state.idx--
                    }
                    this.setSelectedRow()
                    this.update()
                },
                editSplitProvider(idx: number, runIdx: number, segIdx: number) {
                    return () => {
                        this.state.showEdit = true
                        mountEditComponent(this.$('#editor'), {
                            submitHandler: this.submitSplitProvider(idx, runIdx, segIdx),
                            closeHandler: this.closeSplitHandler
                        })
                        this.update()
                    }
                },
                submitSplitProvider(idx: number, runIdx: number, segIdx: number) {
                    return (time: string) => {
                        nodecg.sendMessage('editSplit', {
                            idx: idx,
                            runIndex: runIdx,
                            segIndex: segIdx,
                            time: time
                        })
                        .catch((err) => {
                            this.notify(err, 'is-warning')
                        })
                        this.state.showEdit = false
                        this.update()
                    }
                },
                closeSplitHandler(e:Event) {
                    this.state.showEdit = false
                    this.update()
                }
            }
        }

        SplitList.components = {
            SplitEdit
        }

        export default SplitList
        
    </script>
</split-list>